plugins {
  id 'java'
  id 'com.github.johnrengelman.shadow' version '1.2.3'
  id 'com.commercehub.gradle.plugin.avro' version "0.5.0"
}

archivesBaseName = 'snappy-examples'

allprojects {

  version = '1.2.0'

  repositories {
    mavenLocal()
    mavenCentral()
  }

  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'scala'
  apply plugin: 'idea'
  apply plugin: 'eclipse'
  apply plugin: "com.commercehub.gradle.plugin.avro"

  ext {
    sparkVersion = '2.1.1.8'
    snappyVersion = '1.2.0'
  }

  configurations.all {
    resolutionStrategy.cacheChangingModulesFor 4, 'hours'
  }

  dependencies {
    compile 'org.scala-lang:scala-library:2.11.6'
    compile 'org.scala-lang:scala-reflect:2.11.6'
    compile 'org.scala-lang:scala-compiler:2.11.6'
  }
}

dependencies {
  compileOnly "io.snappydata:snappydata-core_2.11:${snappyVersion}"
  compileOnly "io.snappydata:snappydata-cluster_2.11:${snappyVersion}"
  compileOnly "io.snappydata:snappy-spark-core_2.11:${sparkVersion}"
  compileOnly "io.snappydata:snappy-spark-catalyst_2.11:${sparkVersion}"
  compileOnly "io.snappydata:snappy-spark-sql_2.11:${sparkVersion}"

  compile 'org.apache.kafka:kafka-clients:0.10.0.1'
  compile 'org.apache.kafka:kafka_2.11:0.10.0.1'
}

sourceSets {
  test.compileClasspath += configurations.compileOnly
  test.runtimeClasspath += configurations.compileOnly
}

task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
  source("src/avro")
  outputDir = file("src/main/java")
}

compileJava.source(generateAvro.outputs)

avro.stringType = "charSequence"

ext {
  assemblyJar = rootProject.tasks.getByPath(':assembly:shadowJar').outputs
}

def assemblyJar = tasks.getByPath(':assembly:shadowJar').outputs

task generateAdImpressions(type: JavaExec, dependsOn: classes) {
  main = 'io.snappydata.adanalytics.KafkaAdImpressionProducer'
  classpath sourceSets.test.runtimeClasspath
  environment 'PROJECT_ASSEMBLY_JAR', assemblyJar.files.asPath
}